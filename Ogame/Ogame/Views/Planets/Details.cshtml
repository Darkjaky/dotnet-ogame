@model Ogame.Models.PlanetView.PlanetDetailsViewInterface

@{
    ViewData["Title"] = "Planet <" + Model._planet.Name + ">";
    var user = ViewData["user"] as User;
}

<a asp-controller="Dashboard" asp-action="" class="back-button">
    <img class="back-icon" src="/images/back-icon.png" />
    Back to Planets
</a>

<div class="planet-container">
    <h2>
        @Html.DisplayFor(model => model._planet.Name)
    </h2>
    <p class="dist-star">@Math.Round((decimal)Model._planet.Dist_to_star, 1) millions km from Star</p>

    <div class="row planet-resources">
        <span class="col planet-resources-item"><b>Cristal:</b> @Math.Round(Model._planet.Cristal)</span>
        <span class="col planet-resources-item"><b>Metal:</b> @Math.Round(Model._planet.Metal)</span>
        <span class="col planet-resources-item"><b>Deut:</b> @Math.Round(Model._planet.Deuterium)</span>
        <span class="col planet-resources-item"><b>Energy:</b> @Math.Round(Model._planet.Energy)</span>
    </div>
</div>

<h3>Mines</h3>
<div class="row">
    @foreach (var mine in ViewData["mines"] as List<Mine>)
    {
        <div class="col-md-4">
            <div class="entity-container">
                <div class="caps-container">
                    <div class="row">
                        <div class="col-md-6 center-column">
                            <span class="caps-title">Next Upgrade</span>
                            <span class="caps-item">Cristal: @Math.Round(Ogame.Data.ActionCost.UpgradeMineCost(mine).CristalCost)</span>
                            <span class="caps-item">Metal: @Math.Round(Ogame.Data.ActionCost.UpgradeMineCost(mine).MetalCost)</span>
                            <span class="caps-item">Deuterium: @Math.Round(Ogame.Data.ActionCost.UpgradeMineCost(mine).DeuteriumCost)</span>
                            <span class="caps-item">Energy: @Math.Round(Ogame.Data.ActionCost.UpgradeMineCost(mine).EnergyCost)</span>
                        </div>
                    </div>
                </div>
                <img class="entity-icon" src="/images/mine-icon.png" />
                <span class="entity-name">@mine.Ressource</span>
                <div class="row entity-properties">
                    <span class="entity-property">@Math.Round(mine.CollectRate) per @Ogame.Data.TemporalActionResolver.CycleDuration.TotalMinutes min</span>
                    <span class="entity-property">Level @mine.Level</span>
                </div>
                <div class="row entity-status-container">
                    <span class="entity-status">@mine.Action.Type</span>
                    @if (mine.Action.Type == TemporalAction.ActionType.Upgrade)
                    {
                        var timeLeft = mine.Action.Due_to - DateTime.Now;

                        <span class="entity-status">@timeLeft.Minutes min @timeLeft.Seconds sec</span>

                    }
                </div> 
                @{
                    var actionCost = Ogame.Data.ActionCost.UpgradeMineCost(mine);
                    var canUpgrade = Ogame.Data.ActionCost.CanUpgrade(actionCost, Model._planet);
                }
                @if (canUpgrade && mine.Action.Type != TemporalAction.ActionType.Upgrade)
                {
                    <a class="upgrade-button" asp-controller="Planets" asp-action="UpgradeMine" asp-route-id="@mine.MineID"><img class="upgrade-icon" src="/images/upgrade-icon.png" /></a>
                }
            </div>
        </div>
    }
</div>

<h3>Defense</h3>
<div class="row">
    @foreach (var defense in ViewData["defenses"] as List<Defense>)
    {
        <div class="col-md-4">
            <div class="entity-container bg-blue">
                <div class="caps-container">
                    <div class="row">
                        <div class="col-md-6 center-column">
                            <span class="caps-title">Next Upgrade</span>
                            <span class="caps-item">Cristal: @Math.Round(Ogame.Data.ActionCost.UpgradeDefenseActionCost(defense).CristalCost)</span>
                            <span class="caps-item">Metal: @Math.Round(Ogame.Data.ActionCost.UpgradeDefenseActionCost(defense).MetalCost)</span>
                            <span class="caps-item">Deuterium: @Math.Round(Ogame.Data.ActionCost.UpgradeDefenseActionCost(defense).DeuteriumCost)</span>
                            <span class="caps-item">Energy: @Math.Round(Ogame.Data.ActionCost.UpgradeDefenseActionCost(defense).EnergyCost)</span>
                        </div>
                    </div>
                </div>
                <img class="entity-icon" src="/images/defense-icon.png" />
                <span class="entity-name">Defense</span>
                <div class="row entity-properties">
                    <span class="entity-property">Energy: @Math.Round(defense.Energy)</span>
                    <span class="entity-property">Level @defense.Level</span>
                </div>
                <div class="row entity-status-container">
                    <span class="entity-status">@defense.Action.Type</span>
                    @if (defense.Action.Type == TemporalAction.ActionType.Upgrade)
                    {
                        var timeLeft = defense.Action.Due_to - DateTime.Now;

                        <span class="entity-status">@timeLeft.Minutes min @timeLeft.Seconds sec</span>

                    }
                </div>
                @{
                    var actionCost = Ogame.Data.ActionCost.UpgradeDefenseActionCost(defense);
                    var canUpgrade = Ogame.Data.ActionCost.CanUpgrade(actionCost, Model._planet);
                }
                @if (canUpgrade && defense.Action.Type != TemporalAction.ActionType.Upgrade)
                {
                    <a class="upgrade-button" asp-controller="Planets" asp-action="UpgradeDefense" asp-route-id="@defense.DefenseID"><img class="upgrade-icon" src="/images/upgrade-icon.png" /></a>
                }

            </div>
        </div>
    }
</div>

<h3>Spaceships</h3>
<div class="row">
    @{
        var actioncost = Ogame.Data.ActionCost.createSpaceshipCost();
        var canAddSpaceship = Ogame.Data.ActionCost.CanCreateSpaceship(actioncost, Model._planet);
    }

    @if (canAddSpaceship)
    {
        <div class="col-md-2 padding-add-new">
            <div class="entity-container entity-container-hover" onclick="location.href='@Url.Action("CreateSpaceship", "Planets", new { id = Model._planet.PlanetID })'">
                <span class="entity-name no-margin">Add New</span>
            </div>
        </div>
    }

    @foreach (var spaceship in ViewData["spaceships"] as List<Spaceship>)
    {
        <div class="col-md-4">
            <div class="entity-container bg-orange">
                <div class="caps-container">
                    <div class="row">
                        <div class="col-md-6 center-column">
                            <span class="caps-title">Next Upgrade</span>
                            <span class="caps-item">Cristal: @Math.Round(Ogame.Data.ActionCost.UpgradeSpaceshipActionCost(spaceship).CristalCost)</span>
                            <span class="caps-item">Metal: @Math.Round(Ogame.Data.ActionCost.UpgradeSpaceshipActionCost(spaceship).MetalCost)</span>
                            <span class="caps-item">Deuterium: @Math.Round(Ogame.Data.ActionCost.UpgradeSpaceshipActionCost(spaceship).DeuteriumCost)</span>
                            <span class="caps-item">Energy: @Math.Round(Ogame.Data.ActionCost.UpgradeSpaceshipActionCost(spaceship).EnergyCost)</span>
                        </div>
                    </div>
                </div>
                <img class="entity-icon" src="/images/spaceship-icon.png" />
                <span class="entity-name">Spaceship S-@spaceship.SpaceshipID</span>
                <div class="row entity-properties">
                    <span class="entity-property">Energy: @Math.Round(spaceship.Energy)</span>
                    <span class="entity-property">Level @spaceship.Level</span>
                </div>
                <div class="row entity-status-container">
                    <span class="entity-status">@spaceship.Action.Type</span>
                    @if (spaceship.Action.Type == TemporalAction.ActionType.Attack || spaceship.Action.Type == TemporalAction.ActionType.Upgrade)
                    {
                        var timeLeft = spaceship.Action.Due_to - DateTime.Now;

                        <span class="entity-status">@timeLeft.Minutes min @timeLeft.Seconds sec</span>

                    }
                </div>
                @{
                    var actionCost = Ogame.Data.ActionCost.UpgradeSpaceshipActionCost(spaceship);
                    var canUpgrade = Ogame.Data.ActionCost.CanUpgrade(actionCost, Model._planet);
                    var canAttack = false;
                    if (spaceship.Level > 0) {
                        actionCost = Ogame.Data.ActionCost.AttackCost(spaceship, Model._planet.X + (int) spaceship.Energy/10, Model._planet.Y);
                        canAttack = Ogame.Data.ActionCost.CanAttack(actionCost, spaceship);
                    }
                }
                @if (canUpgrade  && spaceship.Action.Type != TemporalAction.ActionType.Upgrade)
                {
                    <a class="upgrade-button" asp-controller="Planets" asp-action="UpgradeSpaceship" asp-route-id="@spaceship.SpaceshipID"><img class="upgrade-icon" src="/images/upgrade-icon.png" /></a>
                }
                @if (canAttack  && spaceship.Action.Type != TemporalAction.ActionType.Attack)
                {
                    <a class="fight-button" asp-controller="Spaceships" asp-action="Attack" asp-route-id="@spaceship.SpaceshipID"><img class="fight-icon" src="/images/fight-icon.png" /></a>
                }
            </div>
        </div>
    }
</div>

<h3>Solar Panel</h3>
<div class="row">
    @foreach (var solarpanel in ViewData["solarPanels"] as List<SolarPanel>)
    {
        <div class="col-md-4">
            <div class="entity-container bg-yellow">
                <div class="caps-container">
                    <div class="row">
                        <div class="col-md-6 center-column">
                            <span class="caps-title">Next Upgrade</span>
                            <span class="caps-item">Cristal: @Math.Round(Ogame.Data.ActionCost.UpgradeSolarPanelCost(solarpanel).CristalCost)</span>
                            <span class="caps-item">Metal: @Math.Round(Ogame.Data.ActionCost.UpgradeSolarPanelCost(solarpanel).MetalCost)</span>
                            <span class="caps-item">Deuterium: @Math.Round(Ogame.Data.ActionCost.UpgradeSolarPanelCost(solarpanel).DeuteriumCost)</span>
                            <span class="caps-item">Energy: @Math.Round(Ogame.Data.ActionCost.UpgradeSolarPanelCost(solarpanel).EnergyCost)</span>
                        </div>
                    </div>
                </div>
                <img class="entity-icon" src="/images/solar-panel-icon.png" />
                <span class="entity-name">Solar Panel</span>
                <div class="row entity-properties">
                    <span class="entity-property">@Math.Round(solarpanel.CollectRate) per @Ogame.Data.TemporalActionResolver.CycleDuration.TotalMinutes min</span>
                    <span class="entity-property">Level @solarpanel.Level</span>
                </div>
                <div class="row entity-status-container">
                    <span class="entity-status">@solarpanel.Action.Type</span>
                    @if (solarpanel.Action.Type == TemporalAction.ActionType.Upgrade)
                    {
                        var timeLeft = solarpanel.Action.Due_to - DateTime.Now;

                        <span class="entity-status">@timeLeft.Minutes min @timeLeft.Seconds sec</span>

                    }
                </div>
                @{
                    var actionCost = Ogame.Data.ActionCost.UpgradeSolarPanelCost(solarpanel);
                    var canUpgrade = Ogame.Data.ActionCost.CanUpgrade(actionCost, Model._planet);
                }
                @if (canUpgrade && solarpanel.Action.Type != TemporalAction.ActionType.Upgrade)
                {
                    <a class="upgrade-button" asp-controller="Planets" asp-action="UpgradeSolarPanel" asp-route-id="@solarpanel.SolarPanelID"><img class="upgrade-icon" src="/images/upgrade-icon.png" /></a>
                }
            </div>
        </div>
    }
</div>

<style>
    .body-content {
        padding-top: 20px;
    }

    .back-button {
        color: black;
        background-color: white;
        padding: 10px 8px;
        border-radius: 10px;
        font-size: 20px;
        font-weight: 100;
        transition: all 100ms ease;
    }

    .back-button:hover {
        transition: all 100ms ease;
        color: black;
        font-weight: bold;
        text-decoration: none;
    }

    .back-icon {
        height: 50px;
    }

    .planet-container {
        background: linear-gradient(45deg,#e25d5e, #d7addeb0);
        padding: 45px 0;
        text-align: center;
        border-radius: 15px;
        box-shadow: #000000 0px 0px 6px -1px;
        transition: all 300ms ease;
        margin-bottom: 20px;
        margin-top: 10px;
        position: relative;
    }

    .planet-resources {
        position: absolute;
        bottom: 10px;
        left: 0;
        right: 0;
        font-variant: small-caps;
    }

    .planet-resources-item {
        background-color: #292929;
        padding: 2px 4px;
        border-radius: 6px;
    }

    .dist-star {
        font-weight: 100;
        font-size: 18px;
    }

    .entity-container {
        position: relative;
        background-color: white;
        color: black;
        padding: 40px 0;
        text-align: center;
        border-radius: 15px;
        box-shadow: #000000 0px 0px 6px -1px;
        transition: all 200ms ease;
        margin-bottom: 10px;
    }

    .entity-container-hover:hover {
        background-color: black;
        color: white;
        transition: all 200ms ease;
        cursor: pointer;
    }

    .entity-icon {
        height: 50px;
    }

    .entity-name {
        margin-left: 20px;
        vertical-align: -webkit-baseline-middle;
        font-weight: bold;
        font-size: 30px;
        font-variant: small-caps;
    }

    .entity-properties {
        position: absolute;
        right: 0;
        bottom: 5px;
        left: 0;
        color: white;
    }

    .entity-property {
        background-color: #292929;
        padding: 2px 4px;
        border-radius: 6px;
    }

    .entity-status-container {
        position: absolute;
        right: 0;
        top: 5px;
        left: 0;
        color: black;
    }

    .entity-status {
        background-color: white;
        padding: 2px 20px;
        border-radius: 6px;
        box-shadow: black 0px 0px 2px 0px;
    }



    .upgrade-button {
        position: absolute;
        top: -5px;
        right: -5px;
        z-index:10;
        background-color: #f57979;
        border-radius: 40px;
        padding: 2px;
        box-shadow: black 0px 0px 5px 0px;
        transition: all 500ms ease;
    }

    .upgrade-button:hover {
        transition: all 500ms ease;
        border-radius: 10px;
    }

    .upgrade-icon {
        height: 50px;
    }

    .fight-button {
        position: absolute;
        bottom: -5px;
        z-index: 10;
        right: -5px;
        background-color: white;
        border-radius: 40px;
        padding: 10px;
        box-shadow: black 0px 0px 5px 0px;
        transition: all 500ms ease;
    }

    .fight-button:hover {
        transition: all 500ms ease;
        border-radius: 10px;
    }

    .fight-icon {
        height: 35px;
    }

    .bg-blue {
        background-color: #83d1ef;
    }

    .bg-orange {
        background-color: #ff9c7e;
    }

    .bg-yellow {
        background-color: #ffee73;
    }

    .padding-add-new {
        padding-right: 50px;
    }

    .no-margin {
        margin: 0;
    }

    .caps-container {
        position: absolute;
        background-color: #000000d1;
        color: white;
        height: 100%;
        width: 100%;
        top: 0px;
        z-index: 10;
        display: flex;
        border-radius: 15px;
        align-items: center;
        right: 0;
        justify-content: center;
        left: 0;
        width: auto;
        opacity: 0;
        transition: visibility 0s, opacity 0.2s linear;
        visibility: hidden;
    }

    .entity-container:hover > .caps-container {
        cursor: help;
        visibility: visible;
        opacity: 1;
        transition: 0.2s visibility 0s, opacity 0.2s linear;
    }

    .caps-title {
        display: block;
        font-size: 18px;
        font-weight: bold;
        font-variant: small-caps;
    }

    .caps-item {
        display: block;
        font-variant: small-caps;
        text-align: left;
    }

    .center-column {
        float: none;
        margin: 0 auto;
        width: auto;
    }
</style>
