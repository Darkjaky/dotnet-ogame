// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ogame.Data;

namespace Ogame.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190517134456_ChangeRessourceName")]
    partial class ChangeRessourceName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Ogame.Models.Caps", b =>
                {
                    b.Property<int>("CapsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Cristal_cap");

                    b.Property<float>("Deuterium_cap");

                    b.Property<float>("Energy_cap");

                    b.Property<float>("Growth_factor");

                    b.Property<float>("Metal_cap");

                    b.Property<float>("Repair_factor");

                    b.HasKey("CapsID");

                    b.ToTable("Caps");
                });

            modelBuilder.Entity("Ogame.Models.Defense", b =>
                {
                    b.Property<int>("DefenseID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionID");

                    b.Property<int>("CapsID");

                    b.Property<float>("Energy");

                    b.Property<int>("Level");

                    b.Property<int>("PlanetID");

                    b.HasKey("DefenseID");

                    b.HasIndex("ActionID");

                    b.HasIndex("CapsID");

                    b.HasIndex("PlanetID");

                    b.ToTable("Defenses");
                });

            modelBuilder.Entity("Ogame.Models.Mine", b =>
                {
                    b.Property<int>("MineID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionID");

                    b.Property<int>("CapsID");

                    b.Property<float>("CollectRate");

                    b.Property<int>("Level");

                    b.Property<int>("PlanetID");

                    b.Property<int>("Ressource");

                    b.HasKey("MineID");

                    b.HasIndex("ActionID");

                    b.HasIndex("CapsID");

                    b.HasIndex("PlanetID");

                    b.ToTable("Mines");
                });

            modelBuilder.Entity("Ogame.Models.Planet", b =>
                {
                    b.Property<int>("PlanetID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Cristal");

                    b.Property<float>("Deuterium");

                    b.Property<int>("Dist_to_star");

                    b.Property<float>("Energy");

                    b.Property<float>("Metal");

                    b.Property<string>("Name");

                    b.Property<string>("UserID");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("PlanetID");

                    b.HasIndex("UserID");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("Ogame.Models.SolarPanel", b =>
                {
                    b.Property<int>("SolarPanelID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionID");

                    b.Property<int>("CapsID");

                    b.Property<float>("CollectRate");

                    b.Property<int>("Level");

                    b.Property<int>("PlanetID");

                    b.HasKey("SolarPanelID");

                    b.HasIndex("ActionID");

                    b.HasIndex("CapsID");

                    b.HasIndex("PlanetID");

                    b.ToTable("SolarPanels");
                });

            modelBuilder.Entity("Ogame.Models.Spaceship", b =>
                {
                    b.Property<int>("SpaceshipID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionID");

                    b.Property<int>("CapsID");

                    b.Property<float>("Energy");

                    b.Property<int>("Level");

                    b.Property<int>("PlanetID");

                    b.HasKey("SpaceshipID");

                    b.HasIndex("ActionID");

                    b.HasIndex("CapsID");

                    b.HasIndex("PlanetID");

                    b.ToTable("Spaceships");
                });

            modelBuilder.Entity("Ogame.Models.TemporalAction", b =>
                {
                    b.Property<int>("TemporalActionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Due_to");

                    b.Property<int?>("TargetID");

                    b.Property<int>("Type");

                    b.HasKey("TemporalActionID");

                    b.HasIndex("TargetID");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Ogame.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Score");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ogame.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ogame.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogame.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ogame.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ogame.Models.Defense", b =>
                {
                    b.HasOne("Ogame.Models.TemporalAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("Ogame.Models.Caps", "Caps")
                        .WithMany()
                        .HasForeignKey("CapsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogame.Models.Planet", "Planet")
                        .WithMany("Defenses")
                        .HasForeignKey("PlanetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ogame.Models.Mine", b =>
                {
                    b.HasOne("Ogame.Models.TemporalAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("Ogame.Models.Caps", "Caps")
                        .WithMany()
                        .HasForeignKey("CapsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogame.Models.Planet", "Planet")
                        .WithMany("Mines")
                        .HasForeignKey("PlanetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ogame.Models.Planet", b =>
                {
                    b.HasOne("Ogame.Models.User", "User")
                        .WithMany("Planets")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Ogame.Models.SolarPanel", b =>
                {
                    b.HasOne("Ogame.Models.TemporalAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("Ogame.Models.Caps", "Caps")
                        .WithMany()
                        .HasForeignKey("CapsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogame.Models.Planet", "Planet")
                        .WithMany("SolarPanels")
                        .HasForeignKey("PlanetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ogame.Models.Spaceship", b =>
                {
                    b.HasOne("Ogame.Models.TemporalAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("Ogame.Models.Caps", "Caps")
                        .WithMany()
                        .HasForeignKey("CapsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogame.Models.Planet", "Planet")
                        .WithMany("Spaceships")
                        .HasForeignKey("PlanetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ogame.Models.TemporalAction", b =>
                {
                    b.HasOne("Ogame.Models.Planet", "Target")
                        .WithMany("TemporalActions")
                        .HasForeignKey("TargetID");
                });
#pragma warning restore 612, 618
        }
    }
}
